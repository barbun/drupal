<?php

/**
 * @file
 * Support exporting to quant.
 */

/**
 * Implements hook_help().
 */
function quant_help($section) {
  switch ($section) {
    case 'quant/config':
      return '';

    case 'quant/api':
      return '';
  }
}

/**
 * Implements hook_menu().
 */
function quant_menu() {
  $items['admin/config/services/quant'] = array(
    'title' => 'Quant',
    'description' => 'Configure the Quant static site generator.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quant_config'),
    'file' => 'quant.admin.inc',
    'access arguments' => array('configure quant'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/services/quant/settings'] = array(
    'title' => 'Config',
    'description' => 'Configure the Quant static site generator.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quant_config'),
    'file' => 'quant.admin.inc',
    'access arguments' => array('configure quant'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/config/services/quant/seed'] = array(
    'title' => 'Seed',
    'description' => 'Hydrate the static representation of the Drupal site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quant_seed_settings'),
    'file' => 'quant.admin.inc',
    'access arguments' => array('bulk quant export'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  // Custom quant view controller.
  $items['node/%node/quant'] = array(
    'title callback' => 'quant_page_title',
    'title arguments' => array(1),
    'page callback' => 'quant_page_view',
    'page arguments' => array(1),
    'file' => 'quant.renderer.inc',
    'access callback' => 'quant_page_access',
    'access arguments' => array(1),
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function quant_admin_paths() {
  return array(
    'admin/quant/config' => TRUE,
    'admin/quant/seed' => TRUE,
    'node/%node/quant' => FALSE,
  );
}

/**
 * Implements hook_permission()
 */
function quant_permission() {
  return array(
    'configure quant' => array(
      'description' => t('Configure the Quant exporter'),
      'title' => t('Configure quant'),
      'restrict access' => TRUE,
    ),
    'bulk quant export' => array(
      'description' => t('Trigger a bulk export/seed via Quant'),
      'title' => t('Bulk Quant Export'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_node_insert().
 */
function quant_hook_node_insert($node) {
  quant_seed($node->nid);
}

/**
 * Implements hook_node_update().
 */
function quant_hook_node_update($node) {
  quant_seed($node->nid);
}

/**
 * Seed a node.
 *
 * @param int $nid
 *   The node id to send.
 * @param array $context
 *   The batch context.
 */
function quant_seed($nid, $context = []) {
  global $base_url;

  // This clears the message bag as we don't want this to be
  // rendered with the static output.
  drupal_get_messages();

  $response = drupal_http_request($base_url . "/node/$nid/quant");

  if (!property_exists($response, 'data')) {
    watchdog('quant', 'Unable to complete subrequest %error %request', array(
      '%error' => $response->error,
      '%request' => json_encode($response),
    ), WATCHDOG_ERROR);
    return FALSE;
  }

  // Path alias might not be what we want.
  $alias = drupal_get_path_alias("node/$nid");
  $markup = $response->data;

  $meta = array();
  $context = array('nid' => $nid);

  drupal_alter('quant_meta', $meta, $context);

  dpm($meta);

  module_invoke_all('quant_seed', $alias, $markup, $meta);
}

/**
 * Implements hook_quant_seed().
 */
function quant_quant_seed($location, $data, $meta = []) {
  if (!($file_path = variable_get('quant_storage_location'))) {
    watchdog('quant', 'Unable to export static asset to disk [storage_location] is not defined', array(), WATCHDOG_INFO);
    return FALSE;
  }

  // Make sure we have a trailing slash.
  $file_path = rtrim($file_path, '/') . '/';

  $dir = $file_path . dirname($location);
  $file = $file_path . $location;

  if (empty(pathinfo($file, PATHINFO_EXTENSION))) {
    $dir = $file_path . $location;
    $file .= '/index.html';
  }

  dpm('create dir ' . $dir);

  // Make sure the directory exists.
  @mkdir($dir, 0755);
  file_put_contents($file, $data);
}

/**
 * Implements hook_quant_meta_alter().
 */
function quant_quant_meta_alter(&$meta, $context) {
  $node = node_load($context['nid']);
  $meta['published'] = $node->status;

  // @TODO: Transition support.
  $meta['transitions'] = [];

  // @TODO: node info.
  $meta['info'] = [];
}

/**
 * Prepare a batch process for the node entity type.
 *
 * @param array $nids
 *   A list of nodes to export.
 */
function _quant_batch_nodes($nids = array()) {

  $ops = array();

  foreach ($nids as $nid) {
    $ops[] = array(
      'quant_seed',
      array($nid),
    );
  }

  $batch = array(
    'title' => t('Quant seeding'),
    'operations' => $ops,
    'finished' => '_quant_batch_complete',
    'init_message' => t('Initialising...'),
    'progress_message' => t('Operation @current out of @total'),
    'error_message' => t('Unable to export'),
    'file' => drupal_get_path('module', 'quant') . 'quant.module',
  );

  return $batch;
}

/**
 * Create the batch process to export the form.
 *
 * @param array $form
 *   The form render array.
 * @param array $form_state
 *   The submitted form values.
 */
function _quant_seed_prepare($form, $form_state) {
  if (!variable_get('quant_seed_entity_node')) {
    drupal_set_message(t('Nodes are not configured to be exported.'));
    return;
  }

  // Fetch the node ids.
  $nids = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->execute()
    ->fetchCol();

  $batch = _quant_batch_nodes($nids);

  batch_set($batch);
}

/**
 * Generate warning messsages for the seed form.
 *
 * @param array &$form
 *   The form render array.
 */
function _quant_get_seed_warnings(&$form) {
  $cssagg = variable_get('preprocess_css');
  $jsagg = variable_get('preprocess_js');

  if ($cssagg == 1 && $jsagg == 1) {
    // Good things get no warnings.
    return;
  }

  if ($cssagg == 0) {
    drupal_set_message(t('CSS aggregation is disabled'), 'warning');
  }

  if ($jsagg == 0) {
    drupal_set_message(t('JS aggregation is disabled'), 'warning');
  }

  drupal_set_message(t('This could lead to performance issues. To resolve, visit /admin/config/development/performance'), 'warning');
}

function quant_test() {
  quant_seed(1);
  // $aliases = [
  //   '/file.jpg',
  //   '/no-extension',
  // ];

  // foreach ($aliases as $a) {
  //   $ext = strtolower(pathinfo($a, PATHINFO_EXTENSION));
  //   dpm($ext);
  // }

}
