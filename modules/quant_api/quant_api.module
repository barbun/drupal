<?php

/**
 * @file
 * Hook implementations for quant_api.
 */

/**
 * The default URL endpoint for Quant.
 *
 * @var string
 */
define('QUANT_ENDPOINT_DEFAULT', 'https://api.quantcdn.io/');

/**
 * Implements hook_help()
 */
function quant_api_help() {
  // @TODO.
}

/**
 * Implements hook_menu().
 */
function quant_api_menu() {
  $items['admin/config/services/quant/api'] = array(
    'title' => 'API',
    'description' => 'Configure the API connection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quant_api_settings'),
    'file' => 'quant_api.admin.inc',
    'access arguments' => array('configure quant'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  return $items;
}

/**
 * Get request headers.
 *
 * @return array
 *   The standard quant api headers.
 */
function quant_api_get_request_headers() {
  $token = variable_get('quant_api_token');
  $customer = variable_get('quant_api_customer');
  $project = variable_get('quant_api_project');

  if (empty($token)) {
    watchdog('quant_api', 'API Token is not configured.', [], 'info');
    return [];
  }

  if (empty($customer)) {
    watchdog('quant_api', 'API Customer is not configured', [], 'info');
    return [];
  }

  if (empty($project)) {
    watchdog('quant_api', 'API Project is not configured', [], 'info');
    return [];
  }

  return array(
    'quant-customer' => $customer,
    'quant-token' => $token,
    'quant-project' => $project,
  );
}

/**
 * Implements hook_quant_seed().
 */
function quant_api_quant_seed($location, $data, $meta = [], $context = []) {
  global $base_url;

  $api = variable_get('quant_api_endpoint', QUANT_ENDPOINT_DEFAULT);

  if (empty($api)) {
    watchdog('quant_api', 'API endpoint is not configured.', [], 'info');
    return;
  }

  // Ensure we have a leading forward-slash.
  $location = '/' . ltrim($location, '/');

  $request = array(
    'headers' => quant_api_get_request_headers() + array(
      'content-type' => 'application/json',
      'User-Agent' => 'Quant (+http://quant.io)',
    ),
    'method' => 'POST',
    'data' => json_encode(array(
      'content' => $data,
      'url' => $location,
      'published' => $meta['published'],
      'transitions' => $meta['transitions'],
      'info' => $meta['info'],
      'proxy_override' => $meta['proxy_override'],
    )),
  );

  $response = drupal_http_request($api, $request);

  if (!empty($response->error)) {
    if (empty($response->data)) {
      // This is a connection error between the drupal server and quant.
      watchdog('quant_api', 'Connection error');
      return;
    }
    $body = json_decode($response->data);
    watchdog('quant_api', 'Error sending request: %error %res', array(
      '%error' => $body->errorMsg,
      '%res' => json_encode($response),
    ), WATCHDOG_ERROR);
    return;
  }

  $data = json_decode($response->data, TRUE);
  $media = array_merge($data['attachments']['js'], $data['attachments']['css'], $data['attachments']['media']['images'], $data['attachments']['media']['documents'], $data['attachments']['media']['video'], $data['attachments']['media']['audio']);

  foreach ($media as $item) {
    // @todo: Configurable to disallow remote files.
    $file = urldecode($item['path']);
    $on_disk = parse_url($file, PHP_URL_PATH);
    $domain = parse_url($file, PHP_URL_HOST);

    if (!empty($domain) && stripos($base_url, $domain) == -1) {
      // @todo: Determine local vs. remote.
      continue;
    }

    $loc = DRUPAL_ROOT . $on_disk;

    if (!file_exists($loc)) {
      watchdog('quant_api', 'File not found: %file', array(
        '%file' => $file,
      ));
      continue;
    }

    if (isset($item['existing_md5']) && md5_file($loc) == $item['existing_md5']) {
      // This file hasn't changed since the last export.
      continue;
    }

    // @TODO - this processes inline in the batch request
    // which might cause performance problems with pages with
    // many assets.
    quant_seed_file($file, [
      'location' => $loc,
      'request' => $on_disk,
    ]);
  }

}

/**
 * Implements hook_quant_seed_file().
 */
function quant_api_quant_seed_file($url, $context) {
  $api = variable_get('quant_api_endpoint', QUANT_ENDPOINT_DEFAULT);

  if (empty($api)) {
    watchdog('quant_api', 'API endpoint is not configured.', [], 'info');
    return;
  }

  if (empty($context['location'])) {
    quant_log('Unable to upload %u, location not specified', ['%u' => $url]);
    return;
  }

  $headers = quant_api_get_request_headers() + array(
    'Quant-File-Url' => $context['request'],
    'User-Agent' => 'Quant (+http://quant.io)',
  );

  $curl_headers = array();
  foreach ($headers as $header => $value) {
    $curl_headers[] = "{$header}: {$value}";
  }

  // Drupal HTTP request doesn't support streaming files - so we need
  // to use curl directly to support large files.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $api);
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_HTTPHEADER, $curl_headers);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);

  $data['data'] = curl_file_create(
    $context['location'],
    mime_content_type($context['location']),
    basename($context['location'])
  );

  curl_setopt($ch, CURLOPT_POSTFIELDS, $data);

  $result = curl_exec($ch);
  $info = curl_getinfo($ch);
  curl_close($ch);

  $response = json_decode($result);

  if ($info['http_code'] == 413) {
    quant_log('Upload too large.');
    return FALSE;
  }

  if (!empty($response->error)) {
    quant_log('quant_api', 'Error sending request: %error', array(
      '%error' => $response->errorMsg,
    ), WATCHDOG_ERROR);
    return FALSE;
  }

  return $response;
}

/**
 * Unpublish a quant route.
 *
 * @param string $url
 *   The URL to unpublish.
 *
 * @return bool
 *   If the request was successful.
 */
function quant_api_unpublish_route($url) {
  $api = variable_get('quant_api_endpoint', QUANT_ENDPOINT_DEFAULT);

  $options = array(
    'headers' => quant_api_get_request_headers() + array(
      'Quant-Url' => parse_url($url, PHP_URL_PATH),
      'User-Agent' => 'Quant (+http://quant.io)',
    ),
    'method' => 'PATCH',
  );

  $response = drupal_http_request("$api/unpublish", $options);
  if (!empty($response->error)) {
    if (empty($response->data)) {
      // This is a connection error between the drupal server and quant.
      watchdog('quant_api', 'Connection error');
      return FALSE;
    }
    $body = json_decode($response->data);
    watchdog('quant_api', 'Error sending request: %error', array(
      '%error' => $body->errorMsg,
    ), WATCHDOG_ERROR);
    return FALSE;
  }

  return TRUE;
}
